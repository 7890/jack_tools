this jar is compiled from the source tarball with maven
-source 1.6 -target 1.6

to start "daemon":
java -jar plantuml-8020.jar -gui


#================================================
http://plantuml.sourceforge.net/command_line.html

Command line

You can also run PlantUML using the following command :
java -jar plantuml.jar file1 file2 file3

This will look for @startuml into file1, file2 and file3. (For each diagram, it will create a .png file).

For processing a whole directory, you can use:
java -jar plantuml.jar "c:/directory1" "c:/directory2"

This command will search for @startuml and @enduml into .c, .h, .cpp, .txt, .pu, .tex, .html, .htm or .java files of the c:/directory directory. (For each diagram, it will create a .png file).
Wildcards

You can also use wildcards :

    For a single character, use "?"
    For zero or more characters, use "*"
    For zero or more characters, (including "/" or "\"), use "**"

So to process any .cpp files in all directories starting by "dummy" :
java -jar plantuml.jar "dummy*/*.cpp"
And to process any .cpp files in all directories starting by "dummy", and theirs subdirectories :
java -jar plantuml.jar "dummy*/**.cpp"
Excluded files
You can exlude some files from the process using the -x option:
java -jar plantuml.jar -x "**/common/**" -x "**/test/Test*" "dummy*/**/*.cpp"
Output Directory

You can specify an output directory for all images using the "-o" switch:
java -jar plantuml.jar -o "c:/outputPng" "c:/directory2"
NB:
If you recurse into several directory, there is a slight difference if you provide an absolute or a relative path for this output directory.

    absolute path: An unique output directory will be used, with all images generated inside
    relative path: Several output directories will be used accross the file tree.

Configuration file
You can also provide a configuration file which will be included before each diagram:
java -jar plantuml.jar -config "./config.cfg" dir1
Standard Input&Ouput
Using the -pipe option, you can easily use PlantUML into your scripts.

With this option, diagram description is received through the standard input and the png file is generated to the standard output. No file are generated.

Example:
type somefile.txt | java -jar plantuml.jar -pipe > somefile.png
Help

You can have a help message by launching :
java -jar plantuml.jar -help
This will output:

Usage: java -jar plantuml.jar [options] -gui
	(to execute the GUI)
    or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
	(to process files or directories)

You can use the following wildcards in files/dirs:
	*	means any characters but '\'
	?	one and only one character but '\'
	**	means any characters (used to recurse through directories)

where options include:
    -gui		To run the graphical user interface
    -tsvg		To generate images using SVG format
    -teps		To generate images using EPS format
    -txmi		To generate XMI file for class diagram
    -thtml		To generate HTML files for class diagram
    -ttxt		To generate images with ASCII art
    -tutxt		To generate images with ASCII art using Unicode characters
    -o[utput] "dir"	To generate images in the specified directory
    -DVAR1=value	To set a preprocessing variable as if '!define VAR1 value' were used
    -Sparam1=value	To set a skin parameter as if 'skinparam param1 value' were used
    -config "file"	To read the provided config file before each diagram
    -charset xxx	To use a specific charset (default is [platform dependent])
    -e[x]clude pattern	To exclude files that match the provided pattern
    -metadata		To retrieve PlantUML sources from PNG images
    -version		To display information about PlantUML and Java versions
    -v[erbose]		To have log information
    -quiet		To NOT print error message into the console
    -forcegd		To force dot to use GD PNG library
    -forcecairo		To force dot to use Cairo PNG library
    -keepfiles		To NOT delete temporary files after process
    -h[elp]		To display this help message
    -testdot		To test the installation of graphviz
    -graphvizdot "exe"	To specify dot executable
    -p[ipe]		To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
    -computeurl		To compute the encoded URL of a PlantUML source file
    -decodeurl		To retrieve the PlantUML source from an encoded URL
    -syntax		To report any syntax error from standard input without generating images
    -language		To print the list of PlantUML keywords
    -nosuggestengine	To disable the suggest engine when errors in diagrams
    -checkonly		To check the syntax of files without generating images
    -failonerror	To stop processing if syntax error in diagram occurs
    -pattern		To print the list of Regular Expression used by PlantUML
    -duration		To print the duration of complete diagrams processing
    -nbthread N		To use (N) threads for processing
    -nbthread auto	To use 2 threads for processing
    -author[s]		To print information about PlantUML authors
    -overwrite		To all to overwrite read only files
    

If needed, you can setup the environment variable GRAPHVIZ_DOT.
